// <auto-generated />
using System;
using Gate.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gate.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Gate.Domain.Models.AccessInfo", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedUser")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("ACCESSES", (string)null);
                });

            modelBuilder.Entity("Gate.Domain.Models.ComplexInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUser")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("COMPLEXES", (string)null);
                });

            modelBuilder.Entity("Gate.Domain.Models.ContactInfo", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUser")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("PersonInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedUser")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("PersonInfoId");

                    b.ToTable("CONTACTS", (string)null);
                });

            modelBuilder.Entity("Gate.Domain.Models.PersonInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PersonInfo");
                });

            modelBuilder.Entity("Gate.Domain.Models.UnitInfo", b =>
                {
                    b.Property<int>("ComplexId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ComplexId");

                    b.ToTable("UNITIES", (string)null);
                });

            modelBuilder.Entity("Gate.Domain.Models.UnitResidentInfo", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("ResidentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUser")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitInfoComplexId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedUser")
                        .HasColumnType("int");

                    b.HasKey("UnitId", "ResidentId");

                    b.HasIndex("ResidentId");

                    b.HasIndex("ResidentInfoId");

                    b.HasIndex("UnitInfoComplexId");

                    b.ToTable("UNITRESIDENTS", (string)null);
                });

            modelBuilder.Entity("Gate.Domain.Models.GuestInfo", b =>
                {
                    b.HasBaseType("Gate.Domain.Models.PersonInfo");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUser")
                        .HasColumnType("int");

                    b.Property<int>("ResidentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedUser")
                        .HasColumnType("int");

                    b.ToTable("GUESTS", (string)null);
                });

            modelBuilder.Entity("Gate.Domain.Models.ResidentInfo", b =>
                {
                    b.HasBaseType("Gate.Domain.Models.PersonInfo");

                    b.Property<int>("ComplexId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedUser")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedUser")
                        .HasColumnType("int");

                    b.ToTable("RESIDENTS", (string)null);
                });

            modelBuilder.Entity("Gate.Domain.Models.AccessInfo", b =>
                {
                    b.HasOne("Gate.Domain.Models.PersonInfo", "Person")
                        .WithMany("Accesses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gate.Domain.Models.UnitInfo", "Unit")
                        .WithMany("Accesses")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Gate.Domain.Models.ContactInfo", b =>
                {
                    b.HasOne("Gate.Domain.Models.PersonInfo", null)
                        .WithMany("Contacts")
                        .HasForeignKey("PersonInfoId");
                });

            modelBuilder.Entity("Gate.Domain.Models.UnitInfo", b =>
                {
                    b.HasOne("Gate.Domain.Models.ComplexInfo", "Complex")
                        .WithMany("Unities")
                        .HasForeignKey("ComplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complex");
                });

            modelBuilder.Entity("Gate.Domain.Models.UnitResidentInfo", b =>
                {
                    b.HasOne("Gate.Domain.Models.ResidentInfo", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gate.Domain.Models.ResidentInfo", null)
                        .WithMany("UnitResidents")
                        .HasForeignKey("ResidentInfoId");

                    b.HasOne("Gate.Domain.Models.UnitInfo", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gate.Domain.Models.UnitInfo", null)
                        .WithMany("UnitResidents")
                        .HasForeignKey("UnitInfoComplexId");

                    b.Navigation("Resident");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Gate.Domain.Models.GuestInfo", b =>
                {
                    b.HasOne("Gate.Domain.Models.PersonInfo", null)
                        .WithOne()
                        .HasForeignKey("Gate.Domain.Models.GuestInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gate.Domain.Models.ResidentInfo", b =>
                {
                    b.HasOne("Gate.Domain.Models.PersonInfo", null)
                        .WithOne()
                        .HasForeignKey("Gate.Domain.Models.ResidentInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gate.Domain.Models.ComplexInfo", b =>
                {
                    b.Navigation("Unities");
                });

            modelBuilder.Entity("Gate.Domain.Models.PersonInfo", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Gate.Domain.Models.UnitInfo", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("UnitResidents");
                });

            modelBuilder.Entity("Gate.Domain.Models.ResidentInfo", b =>
                {
                    b.Navigation("UnitResidents");
                });
#pragma warning restore 612, 618
        }
    }
}
